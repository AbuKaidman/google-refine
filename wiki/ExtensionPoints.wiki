#summary How extensions can hook into various points in Gridworks (1.5 or later).

This document is for the upcoming version 1.5 and later only. This is still in flux.

Extensions that come with the code base are located under [http://code.google.com/p/freebase-gridworks/source/browse/#svn/trunk/extensions the extensions subdirectory], but when you develop your own extension, you can put its code anywhere as long as you refer to that directory in [http://code.google.com/p/freebase-gridworks/source/browse/trunk/main/webapp/WEB-INF/butterfly.properties the butterfly.properites file] through a `butterfly.modules.path` setting.

=Extension File Layout=

A typical extension sits in a file directory that contains the following files and sub-directories:

{{{
  src/
      com/foo/bar/... *.java source files
  module/
      *.html, *.vt files
      scripts/... *.js files
      styles/... *.css and *.less files
      images/... image files
      MOD-INF/
          lib/*.jar files
          classes/... java class files
          module.properties
          controller.js
}}}

The file named module.properties (see [http://code.google.com/p/freebase-gridworks/source/browse/trunk/extensions/sample-extension/module/MOD-INF/module.properties example]) contains the extension's metadata. Of importance is the name field, which gives the extension a name that's used in many other places to refer to it. This can be different from the extension's directory name. We'll use `my-extension` as an example for the rest of this document:

{{{
  name = my-extension
}}}

Also of importance is the dependency

{{{
  requires = core
}}}

which makes sure that the core module of Gridworks is loaded before the extension attempts to hook into it.

The file named controller.js is responsible for registering the extension's hooks into Gridworks. Look at the sample-extension extension's [http://code.google.com/p/freebase-gridworks/source/browse/trunk/extensions/sample-extension/module/MOD-INF/controller.js controller.js] file for an example. It should have a function called init() that does the hook registrations.

=Client-side Resources=

==Javascript and CSS==

The UI in Gridworks for working with a project is coded in [http://code.google.com/p/freebase-gridworks/source/browse/trunk/main/webapp/modules/core/project.vt this file]. The file is quite small, and that's because almost all of its content is to be expanded dynamically through the Velocity variables $scriptInjection and $styleInjection. So that your own Javascript and CSS files get loaded, you need to register them with the ClientSideResourceManager. See [http://code.google.com/p/freebase-gridworks/source/browse/trunk/extensions/sample-extension/module/MOD-INF/controller.js this file] for an example.

In the registration call, the variable `module` is already available to your code by default, and it refers to your own extension.

{{{
   ClientSideResourceManager.addPaths(
        "project/scripts",
        module,
        [
            "scripts/foo.js",
            "scripts/subdir/bar.js"
        ]
    );
}}}

You can specify one or more files for registration, and their paths are relative to the `module` subdirectory of your extension. They are included in the order listed.

===Javascript Bundling===

Note that `project.vt` belongs to the core module and is thus under the control of the core module's
[http://code.google.com/p/freebase-gridworks/source/browse/trunk/main/webapp/modules/core/MOD-INF/controller.js controller.js file]. The Javascript files to be included in `project.vt` are by default bundled together for performance. When debugging, you can prevent this bundling behavior by setting `bundle` to `false` near the top of that `controller.js` file. (If you have commit access to this code base, be sure not to check that change in.)


==Images==

We recommend that you always refer to images through your CSS files rather than in your Javascript code. URLs to images will thus be relative to your CSS files, e.g.,

{{{
  .foo {
    background: url(../images/x.png);
  }
}}}

If you really really absolutely need to refer to your images in your Javascript code, then look up your extension's URL path in the global Javascript variable `ModuleWirings`:

{{{
  ModuleWirings["my-extension"] + "images/x.png"
}}}

==Client-side HTML Templates==

Beside Javascript, CSS, and images, your extension might also include HTML templates that get loaded on the fly by your Javascript code and injected into the page's DOM. For example, here is [http://code.google.com/p/freebase-gridworks/source/browse/trunk/main/webapp/modules/core/scripts/dialogs/clustering-dialog.html the Cluster/Edit dialog template], which gets loaded by code in [http://code.google.com/p/freebase-gridworks/source/browse/trunk/main/webapp/modules/core/scripts/dialogs/clustering-dialog.js this Javascript file]:

{{{
  var dialog = $(DOM.loadHTML("core", "scripts/dialogs/clustering-dialog.html"));
}}}

`DOM.loadHTML` returns the content of the file as a string, and `$(...)` turns it into a DOM fragment. Where `"core"` is, you would want your extension's name. The path of the HTML file is relative to your extension's `module` subdirectory.


=Project UI Extension Points

==Main Menu==

==Column Header Menu==


=Server-side Extension Points=

Ajax Commands


=Importers and Exporters=

=Scripting Languages=