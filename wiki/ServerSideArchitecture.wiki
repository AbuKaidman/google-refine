#summary Server-side architecture.

Gridworks' server-side is written entirely in Java (`src/main/java/`) and its entry point is the Java servlet `com.metaweb.gridworks.GridworksServlet`. By default, the servlet is hosted in the lightweight Jetty web server instantiated by `src/server/java/com.metaweb.gridworks.Gridworks`. Note that the server class itself is under `src\server\`, not `src\main\`; this separation leaves the possibility of hosting `GridworksServlet` in a different servlet container.

The web server configuration is in `src/main/webapp/WEB-INF/web.xml`; that's where `GridworksServlet` is hooked up. `GridworksServlet` itself is simple: it just reacts to requests from the client-side by routing them to the right `Command` class in the packages `com.metaweb.gridworks.commands.*`.

As mentioned before, the server-side maintains states of the data, and the primary class involved is `com.metaweb.gridworks.ProjectManager`.

==Projects==

In Gridworks there's the concept of a workspace similar to that in Eclipse. When you run Gridworks it manages projects within a single workspace, and the workspace is embodied in a file directory with sub-directories, which by default is specified [FAQ#Where_is_the_Data_Stored? here]. You could get Gridworks to use a different directory by specifying a -d parameter at the command line.

The class `ProjectManager` is what manages the workspace. It keeps in memory the metadata of every project (in the class `ProjectMetadata`). This metadata includes the project's name and last modified date, and any other information necessary to present and let the user interact with the project as a whole. Only when the user decides to look at the project's data would `ProjectManager` load the project's actual data. The separation of project metadata and data is to minimize the amount of stuff loaded into memory.

A project's _actual_ data includes the columns, rows, cells, reconciliation records, and history entries.

A project is loaded into memory when it needs to be displayed or modified, and it remains in memory until 1 hour after the last time it gets modified. Periodically the project manager tries to save modified projects, and it saves as many modified projects as possible within 30 seconds.

==Data Model==

A project's data consists of
  * _raw data_: a list of rows, each row consisting of a list of cells
  * _models_ on top of that raw data that give high-level presentation or interpretation of that data.
This design lets the same raw data be viewed in different ways by different models, and let the models be changed without costly changes to the raw data.

===Column Model===

Cells in rows are not named and can only be addressed by their list position indices. So, a _column model_ is needed to give a name to each list position. The column model also stores other metadata for each column, including the Freebase type that cells in the column have been reconciled to and the overall reconciliation statistics of those cells.

Each column also acts as a cache for data computed from the raw data related to that column.

Columns in the column model can be removed and re-ordered without changing the raw data--the cells in the rows. This makes column removal and ordering operations really quick.

====Column Groups====

Consider the following data:

[http://freebase-gridworks.googlegroups.com/web/Gridworks-row-groups.png?gsc=HfBWviMAAADmKupvm6NLMZKrfX8wiTziMS12ItRK21105q9SpgEhHa0IoyLhPG2x5smOr2otMGI]

Although the data is in a grid, we humans can understand that it is a tree. First of all, all rows contain data ultimately linked to the movie Austin Powers, although only one row contains the text "Austin Powers" in the "movie title" column. We also know that "USA" and "Germany" are not related to Elizabeth Hurley and Mike Myers respectively (say, as their nationality), but rather, "USA" and "Germany" are related to the movie (where it was released). We know that Mike Myers played both the character "Austin Powers" and the character "Dr. Evil"; and for the latter he received 2 awards. We humans can understand how to interpret the grid as a tree based on its visual layout as well as some knowledge we have about the movie domain but is not encoded in the table.

Gridworks can capture our knowledge of this transformation from grid to tree using _column groups_, also stored in the column model. Each column group illustrated as a blue bracket above specifies which columns are grouped together, as well as which of those columns is the key column in that group (blue triangle). One column group can span over columns grouped by another column group, and in this way, column groups form a hierarchy determined by which column group envelopes another. This hierarchy of column groups allows the 2-dimensional (grid-shaped) table of rows and cells to be interpreted as a list of hierarchical (tree-shaped) data records.

Blank cells play a very important role. The blank cell in a key column of a row (e.g., cell "character" on row 4) makes that row (row 4) _depend_ on the first preceding row with that column filled in (row 3). This means that "Best Comedy Perf" on row 4 applies to "Dr. Evil" on row 3. Row 3 is said to be a _context row_ for row 4. Similarly, since rows 2 - 6 all have blank cells in the first column, they all depend on row 1, and all their data ultimately applies to the movie Austin Powers. Row 1 depends on no other row and is said to be a _record row_. Rows 1 - 6 together form one _record_.

(As of 2010/05/13, only the XML importer creates column groups. The data table view does display column groups but it doesn't support modifying them.)

===Protograph===

The _protograph model_ is similar to column groups, but it's intended to transform the grid-shaped data to fit Freebase graph schemas for loading into Freebase. Protograph is the internal technical term; in the UI, it's referred to as the schema alignment skeleton.

Ideally, the protograph model should be more closely connected with the column groups, so that changes to one would somehow be propagated to the other. For example, creating the protograph would also create column groups if they don't already exist; and creating column groups would create a protograph with the same shape (but without Freebase schema information). As of 2010/05/13, the protograph model and the column groups are not connected in any way.

==Changes, History, Processes, and Operations==


==Expressions==